import { NextResponse } from 'next/server';
import Stripe from 'stripe';

const allCountries = [
    'AC',
    'AD',
    'AE',
    'AF',
    'AG',
    'AI',
    'AL',
    'AM',
    'AO',
    'AQ',
    'AR',
    'AT',
    'AU',
    'AW',
    'AX',
    'AZ',
    'BA',
    'BB',
    'BD',
    'BE',
    'BF',
    'BG',
    'BH',
    'BI',
    'BJ',
    'BL',
    'BM',
    'BN',
    'BO',
    'BQ',
    'BR',
    'BS',
    'BT',
    'BV',
    'BW',
    'BY',
    'BZ',
    'CA',
    'CD',
    'CF',
    'CG',
    'CH',
    'CI',
    'CK',
    'CL',
    'CM',
    'CN',
    'CO',
    'CR',
    'CV',
    'CW',
    'CY',
    'CZ',
    'DE',
    'DJ',
    'DK',
    'DM',
    'DO',
    'DZ',
    'EC',
    'EE',
    'EG',
    'EH',
    'ER',
    'ES',
    'ET',
    'FI',
    'FJ',
    'FK',
    'FO',
    'FR',
    'GA',
    'GB',
    'GD',
    'GE',
    'GF',
    'GG',
    'GH',
    'GI',
    'GL',
    'GM',
    'GN',
    'GP',
    'GQ',
    'GR',
    'GS',
    'GT',
    'GU',
    'GW',
    'GY',
    'HK',
    'HN',
    'HR',
    'HT',
    'HU',
    'ID',
    'IE',
    'IL',
    'IM',
    'IN',
    'IO',
    'IQ',
    'IS',
    'IT',
    'JE',
    'JM',
    'JO',
    'JP',
    'KE',
    'KG',
    'KH',
    'KI',
    'KM',
    'KN',
    'KR',
    'KW',
    'KY',
    'KZ',
    'LA',
    'LB',
    'LC',
    'LI',
    'LK',
    'LR',
    'LS',
    'LT',
    'LU',
    'LV',
    'LY',
    'MA',
    'MC',
    'MD',
    'ME',
    'MF',
    'MG',
    'MK',
    'ML',
    'MM',
    'MN',
    'MO',
    'MQ',
    'MR',
    'MS',
    'MT',
    'MU',
    'MV',
    'MW',
    'MX',
    'MY',
    'MZ',
    'NA',
    'NC',
    'NE',
    'NG',
    'NI',
    'NL',
    'NO',
    'NP',
    'NR',
    'NU',
    'NZ',
    'OM',
    'PA',
    'PE',
    'PF',
    'PG',
    'PH',
    'PK',
    'PL',
    'PM',
    'PN',
    'PR',
    'PS',
    'PT',
    'PY',
    'QA',
    'RE',
    'RO',
    'RS',
    'RU',
    'RW',
    'SA',
    'SB',
    'SC',
    'SD',
    'SE',
    'SG',
    'SH',
    'SI',
    'SJ',
    'SK',
    'SL',
    'SM',
    'SN',
    'SO',
    'SR',
    'SS',
    'ST',
    'SV',
    'SX',
    'SZ',
    'TA',
    'TC',
    'TD',
    'TF',
    'TG',
    'TH',
    'TJ',
    'TK',
    'TL',
    'TM',
    'TN',
    'TO',
    'TR',
    'TT',
    'TV',
    'TW',
    'TZ',
    'UA',
    'UG',
    'US',
    'UY',
    'UZ',
    'VA',
    'VC',
    'VE',
    'VG',
    'VN',
    'VU',
    'WF',
    'WS',
    'XK',
    'YE',
    'YT',
    'ZA',
    'ZM',
    'ZW',
    'ZZ',
];

const productSizesData = {
    s: {
        name: 'Hemp Hoodie S',
        price: 109,
        description: 'The most planet friendly hoodie you’ll ever wear',
        image: `${process.env.NEXT_PUBLIC_BASE_URL}/_next/image?url=%2Fimg%2Fproduct%2Fslide1.png&w=1080&q=75`,
    },
    m: {
        name: 'Hemp Hoodie M',
        price: 109,
        description: 'The most planet friendly hoodie you’ll ever wear',
        image: `${process.env.NEXT_PUBLIC_BASE_URL}/_next/image?url=%2Fimg%2Fproduct%2Fslide1.png&w=1080&q=75`,
    },
    l: {
        name: 'Hemp Hoodie L',
        price: 109,
        description: 'The most planet friendly hoodie you’ll ever wear',
        image: `${process.env.NEXT_PUBLIC_BASE_URL}/_next/image?url=%2Fimg%2Fproduct%2Fslide1.png&w=1080&q=75`,
    },
    xl: {
        name: 'Hemp Hoodie XL',
        price: 109,
        description: 'The most planet friendly hoodie you’ll ever wear',
        image: `${process.env.NEXT_PUBLIC_BASE_URL}/_next/image?url=%2Fimg%2Fproduct%2Fslide1.png&w=1080&q=75`,
    },
};

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);

export async function POST(req: Request) {
    try {
        const { size } = await req.json();
        if (!size || !['s', 'm', 'l', 'xl'].includes(size)) {
            return NextResponse.json({ error: 'Unsupported size' }, { status: 400 });
        }

        const data = productSizesData[size as keyof typeof productSizesData];
        if (!data) {
            return NextResponse.json({ error: 'Error while product data fetching happened' }, { status: 500 });
        }

        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        const session = await stripe.checkout.sessions.create({
            success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/order-success`,
            cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/order-cancel`,
            payment_method_types: ['card'],
            mode: 'payment',

            shipping_address_collection: {
                allowed_countries: allCountries,
            },

            customer_creation: 'always',
            line_items: [
                {
                    quantity: 1,
                    price_data: {
                        currency: 'usd',
                        unit_amount: data.price * 100,
                        product_data: {
                            name: data.name,
                            description: data.description,
                            images: [data.image],
                        },
                    },
                },
            ],
        });

        return NextResponse.json({ url: session.url });
    } catch (error: unknown) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        console.error('Stripe error:', error.message);
        return NextResponse.json({ error: 'Error while creating checkout session' }, { status: 500 });
    }
}
